// This is your Prisma schema file,
// learn more about it in the docs: https:pris.ly/d/prisma-schema
//
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https:pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(uuid())
  name         String
  email        String @unique
  passwordHash String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relations
  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  Appointment     Appointment[]
  UserWorkingHour UserWorkingHour[]
}

model Account {
  id   String @id @default(uuid())
  name String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relations
  users         User[]
  Establishment Establishment[]
}

model Establishment {
  id   String @id @default(uuid())
  name String

  number        String
  street        String
  neighbourhood String
  city          String
  state         String
  country       String
  zipCode       String

  locationLinks Json?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  accountId String
  account   Account   @relation(fields: [accountId], references: [id])
  Service   Service[]

  Appointment     Appointment[]
  UserWorkingHour UserWorkingHour[]
}

model Service {
  id                String  @id @default(uuid())
  name              String
  price             Decimal @db.Decimal(10, 2)
  description       String
  durationInMinutes Decimal @default(30)

  extraDetails Json?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  establishmentId String
  establishment   Establishment         @relation(fields: [establishmentId], references: [id])
  appointments    AppointmentServices[]
}

model Customer {
  id   String @id @default(uuid())
  name String
  cpf  String @unique

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Appointment Appointment[]
}

enum Status {
  created
  confirmed
  canceled
  executed
  missed
}

model Appointment {
  id String @id @default(uuid())

  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  status Status
  date   DateTime

  createdAt DateTime?             @default(now())
  updatedAt DateTime?             @updatedAt
  deletedAt DateTime?
  services  AppointmentServices[]
}

model AppointmentServices {
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([serviceId, appointmentId])
}

enum Weekday {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

model UserWorkingHour {
  id String @id @default(uuid())

  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  weekday   Weekday
  startTime String
  endTime   String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}
